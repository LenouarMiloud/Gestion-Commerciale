
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PrinterException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Anonyme
 */
public class FacturesClient extends javax.swing.JFrame {

    String[] ref, tva, lib;
    String ref1, tva1, lib1;
    
    public FacturesClient() {
        initComponents();
        lignefac.getTableHeader().setFont(new Font("Dialog", Font.BOLD, 15));
        Actualiser(0); 
        
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        lignefac.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = lignefac.rowAtPoint(e.getPoint());
                int col = lignefac.columnAtPoint(e.getPoint());
                if (col == 0) {
                    
                    JOptionPane jop = new JOptionPane();
                    ref1 = (String)jop.showInputDialog(null, 
                            "Veuillez indiquer la référence du produit !",
                            "Reference",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            ref,
                            ref[0]);
                    model.setValueAt(ref1, row, col);
                }
                
                if (col == 1) {
                    
                    JOptionPane jop = new JOptionPane();
                    lib1 = (String)jop.showInputDialog(null, 
                            "Veuillez indiquer le libellé du produit !",
                            "Libelle",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            lib,
                            lib[0]);
                    model.setValueAt(lib1, row, col);
                }
                
                if (col == 5) {
                    
                    JOptionPane jop = new JOptionPane();
                    tva1 = (String)jop.showInputDialog(null, 
                            "Veuillez indiquer le taux TVA !",
                            "TVA",
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            tva,
                            tva[0]);
                    model.setValueAt(tva1, row, col);
                }
                
            }

            @Override
            public void mousePressed(MouseEvent e) {
               
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                
            }

            @Override
            public void mouseExited(MouseEvent e) {
               
            }
        });
        
        
    }
    
    void Actualiser(int j) {
        
        DB.SelectNumClientDB();
        Client.removeAllItems();
        for(int i=0; i<DB.clients.size(); i++) {
            Client.addItem(DB.clients.get(i).getNomClient()+" "+DB.clients.get(i).getPrenom());
        }
        
        DB.SelectIDModeRegelementDB();
        ModeReglement.removeAllItems();
        for(int i=0; i<DB.DMs.size(); i++) {
            ModeReglement.addItem(DB.DMs.get(i));
        }
        
        DB.SelectRefProduitDB();
        ref = new String[DB.produits.size()];
        lib = new String[DB.produits.size()];
        for(int i=0; i<DB.produits.size(); i++) {
            ref[i]=DB.produits.get(i).getRef();
            lib[i]=DB.produits.get(i).getLibProd();
        }
        
        DB.SelectTauxTVADB();
        tva = new String[DB.TVA.size()];
        for(int i=0; i<DB.TVA.size(); i++) {
            tva[i]=String.valueOf(DB.TVA.get(i));
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SaisiLeJ1 = new javax.swing.JComboBox<>();
        NumClient1 = new javax.swing.JLabel();
        Observation1 = new javax.swing.JLabel();
        NumFacture1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Observation = new javax.swing.JTextArea();
        Client = new javax.swing.JComboBox<>();
        DateFacture1 = new javax.swing.JLabel();
        TotalHT1 = new javax.swing.JLabel();
        DateFacture = new javax.swing.JTextField();
        TotalHT = new javax.swing.JTextField();
        ModeReglement1 = new javax.swing.JLabel();
        ModeReglement = new javax.swing.JComboBox<>();
        TotalTVA1 = new javax.swing.JLabel();
        TotalTVA = new javax.swing.JTextField();
        TotalTTC1 = new javax.swing.JLabel();
        TotalTTC = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        lignefac = new javax.swing.JTable();
        Enregistrer = new javax.swing.JButton();
        Nouvelle1 = new javax.swing.JButton();
        Suivant = new javax.swing.JButton();
        Precedant = new javax.swing.JButton();
        Dernier = new javax.swing.JButton();
        Premier = new javax.swing.JButton();
        Retour = new javax.swing.JButton();
        Supprimer = new javax.swing.JButton();
        NumFacture = new javax.swing.JTextField();
        Imprimer = new javax.swing.JButton();
        Reset = new javax.swing.JButton();

        SaisiLeJ1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Factures Client");
        setResizable(false);

        NumClient1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        NumClient1.setText("Client :");

        Observation1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Observation1.setText("Observation :");

        NumFacture1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        NumFacture1.setText("N° Facture :");

        Observation.setColumns(20);
        Observation.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        Observation.setRows(5);
        jScrollPane1.setViewportView(Observation);

        Client.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientActionPerformed(evt);
            }
        });

        DateFacture1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        DateFacture1.setText("Date Facture :");

        TotalHT1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        TotalHT1.setText("Total HT :");

        DateFacture.setEditable(false);
        DateFacture.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N

        TotalHT.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        TotalHT.setText("0.00");

        ModeReglement1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        ModeReglement1.setText("Mode Réglement :");

        ModeReglement.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N

        TotalTVA1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        TotalTVA1.setText("Total TVA :");

        TotalTVA.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        TotalTVA.setText("0.00");

        TotalTTC1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        TotalTTC1.setText("Total TTC :");

        TotalTTC.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        TotalTTC.setText("0.00");

        lignefac.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        lignefac.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Réference", "Libéllé Produit", "Quantité", "Prix Vente", "Remise", "Taux TVA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lignefac.setToolTipText("");
        lignefac.setCellSelectionEnabled(true);
        lignefac.setRowHeight(30);
        jScrollPane2.setViewportView(lignefac);
        lignefac.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        Enregistrer.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Enregistrer.setText("Save");
        Enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnregistrerActionPerformed(evt);
            }
        });

        Nouvelle1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Nouvelle1.setText("New");
        Nouvelle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nouvelle1ActionPerformed(evt);
            }
        });

        Suivant.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Suivant.setText("Next");
        Suivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuivantActionPerformed(evt);
            }
        });

        Precedant.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Precedant.setText("Back");
        Precedant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrecedantActionPerformed(evt);
            }
        });

        Dernier.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Dernier.setText("Last");
        Dernier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DernierActionPerformed(evt);
            }
        });

        Premier.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Premier.setText("First");
        Premier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PremierActionPerformed(evt);
            }
        });

        Retour.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Retour.setText("Return");
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });

        Supprimer.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Supprimer.setText("Delete");
        Supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupprimerActionPerformed(evt);
            }
        });

        NumFacture.setEditable(false);
        NumFacture.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N

        Imprimer.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Imprimer.setText("Print");
        Imprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimerActionPerformed(evt);
            }
        });

        Reset.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Observation1)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TotalHT1)
                                            .addComponent(TotalTVA1)
                                            .addComponent(TotalTTC1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(TotalTTC, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TotalTVA, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(TotalHT, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Nouvelle1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Imprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Retour)
                                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NumFacture1)
                                    .addComponent(DateFacture1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NumFacture, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DateFacture, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ModeReglement1)
                                    .addComponent(NumClient1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ModeReglement, 0, 140, Short.MAX_VALUE)
                                    .addComponent(Client, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(Premier)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Precedant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Enregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Suivant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Dernier)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NumFacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumClient1)
                            .addComponent(Client, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ModeReglement1)
                            .addComponent(ModeReglement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateFacture1)
                            .addComponent(DateFacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(NumFacture1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Nouvelle1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Supprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Imprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Retour, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalHT1)
                            .addComponent(TotalHT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalTVA1)
                            .addComponent(TotalTVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalTTC1)
                            .addComponent(TotalTTC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Observation1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Dernier, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(Suivant, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Precedant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Premier, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Enregistrer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        Interface I = new Interface();
        I.show();
        this.dispose();
    }//GEN-LAST:event_RetourActionPerformed

    private void Nouvelle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nouvelle1ActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        model.addRow(new Object[]{"","","","","",""});
        
    }//GEN-LAST:event_Nouvelle1ActionPerformed

    private void SupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupprimerActionPerformed
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        int[] rows = lignefac.getSelectedRows();
        for(int i=0;i<rows.length;i++)model.removeRow(rows[i]-i);
    }//GEN-LAST:event_SupprimerActionPerformed

    private void EnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnregistrerActionPerformed
        if(Move==-1) {
          
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        Facture facture = new Facture();
        
        DB.AutoNumFacture();
        NumFacture.setText(Integer.toString(DB.Num));  
        
        
        DB.SelectNumClientDB(); 
        int N=0;
        for(int i=0; i<DB.clients.size(); i++)
        {
            String X=DB.clients.get(i).getNomClient()+" "+DB.clients.get(i).getPrenom();
            if(X.equals(Client.getSelectedItem().toString())) N=Integer.parseInt(DB.clients.get(i).getNum());
        }
        facture.setNumClient(N);
        
        
        facture.setIDAdresseFacturation(N);
        facture.setIDModeReglement(ModeReglement.getSelectedIndex()+1);
        facture.setSaisiPar("Admin");
        facture.setObservation(Observation.getText());
        
        int[]   Quantite = new int[model.getRowCount()];
        String[] Reference = new String[model.getRowCount()],
                 LibProd = new String[model.getRowCount()];
        double[] PrixVente = new double[model.getRowCount()],
                 Remise = new double[model.getRowCount()],
                 TauxTVA = new double[model.getRowCount()];
        
        
        
        for(int i=0; i<model.getRowCount(); i++) {
            Reference[i] = model.getValueAt(i,0).toString();
            LibProd[i] = model.getValueAt(i,1).toString();
            Quantite[i] = Integer.valueOf(model.getValueAt(i,2).toString());
            PrixVente[i] = Double.valueOf(model.getValueAt(i,3).toString());
            Remise[i] = Double.valueOf(model.getValueAt(i,4).toString());
            TauxTVA[i] = Double.valueOf(model.getValueAt(i,5).toString());
        }
        
        facture.setReference(Reference);
        facture.setLibProd(LibProd);
        facture.setQuantite(Quantite);
        facture.setPrixVente(PrixVente);
        facture.setRemise(Remise);
        facture.setTauxTVA(TauxTVA);
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	Date date = new Date();
	DateFacture.setText(dateFormat.format(date));
        facture.setSaisiLe(DateFacture.getText());
        facture.setDateFacture(DateFacture.getText());
        
        double T1=0,T2=0;
        
        for(int i=0; i<model.getRowCount(); i++)
            T1 = T1 + TauxTVA[i]*PrixVente[i]/100*Quantite[i];
        
        for(int i=0; i<model.getRowCount(); i++)
            T2 = T2 + (PrixVente[i]*Quantite[i] - (TauxTVA[i]*PrixVente[i]/100*Quantite[i]));
        
        TotalTVA.setText(Double.toString(T1));
        TotalHT.setText(Double.toString(T2));
        Double Total = Double.parseDouble(TotalHT.getText())+Double.parseDouble(TotalTVA.getText());
        TotalTTC.setText(Double.toString(Total));
        
        facture.setTotalHT(Double.parseDouble(TotalHT.getText()));
        facture.setTotalTVA(Double.parseDouble(TotalTVA.getText()));
        facture.setTotalTTC(Double.parseDouble(TotalTTC.getText()));
        
        
        
        if( Client.getSelectedIndex()!=-1 && ModeReglement.getSelectedIndex()!=-1 && model.getRowCount()!=0 ) {
        if( !Reference[0].equals("") && !LibProd[0].equals("") && Quantite[0]>0 ){
            DB.InsertDB(facture);
        
         JOptionPane.showMessageDialog( null, "Succès!", 
					      "Facture Enregistrée", JOptionPane.INFORMATION_MESSAGE);
         } else {
            JOptionPane.showMessageDialog( null, "Facture Incomplete", 
					      "Erreur!", JOptionPane.ERROR_MESSAGE);
        }
        } else {
            JOptionPane.showMessageDialog( null, "Facture Incomplete", 
					      "Erreur!", JOptionPane.ERROR_MESSAGE);
        }
         
         
        } else {
            
          
            
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        Facture facture = new Facture();
        
        facture.setNumFacture(Integer.parseInt(NumFacture.getText()));
        
        
        DB.SelectNumClientDB(); 
        int N=0;
        for(int i=0; i<DB.clients.size(); i++)
        {
            String X=DB.clients.get(i).getNomClient()+" "+DB.clients.get(i).getPrenom();
            if(X.equals(Client.getSelectedItem().toString())) N=Integer.parseInt(DB.clients.get(i).getNum());
        }
        facture.setNumClient(N);
        
        
        facture.setIDAdresseFacturation(N);
        facture.setIDModeReglement(ModeReglement.getSelectedIndex()+1);
        facture.setSaisiPar("Admin");
        facture.setObservation(Observation.getText());
        
        int[]   Quantite = new int[model.getRowCount()];
        String[] Reference = new String[model.getRowCount()],
                 LibProd = new String[model.getRowCount()];
        double[] PrixVente = new double[model.getRowCount()],
                 Remise = new double[model.getRowCount()],
                 TauxTVA = new double[model.getRowCount()];
        
        
        
        for(int i=0; i<model.getRowCount(); i++) {
            Reference[i] = model.getValueAt(i,0).toString();
            LibProd[i] = model.getValueAt(i,1).toString();
            Quantite[i] = Integer.valueOf(model.getValueAt(i,2).toString());
            PrixVente[i] = Double.valueOf(model.getValueAt(i,3).toString());
            Remise[i] = Double.valueOf(model.getValueAt(i,4).toString());
            TauxTVA[i] = Double.valueOf(model.getValueAt(i,5).toString());
        }
        
        facture.setReference(Reference);
        facture.setLibProd(LibProd);
        facture.setQuantite(Quantite);
        facture.setPrixVente(PrixVente);
        facture.setRemise(Remise);
        facture.setTauxTVA(TauxTVA);
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	Date date = new Date();
	DateFacture.setText(dateFormat.format(date));
        facture.setSaisiLe(DateFacture.getText());
        facture.setDateFacture(DateFacture.getText());
        
        double T1=0,T2=0;
        
        for(int i=0; i<model.getRowCount(); i++)
            T1 = T1 + TauxTVA[i]*PrixVente[i]/100*Quantite[i];
        
        for(int i=0; i<model.getRowCount(); i++)
            T2 = T2 + (PrixVente[i]*Quantite[i] - (TauxTVA[i]*PrixVente[i]/100*Quantite[i]));
        
        TotalTVA.setText(Double.toString(T1));
        TotalHT.setText(Double.toString(T2));
        Double Total = Double.parseDouble(TotalHT.getText())+Double.parseDouble(TotalTVA.getText());
        TotalTTC.setText(Double.toString(Total));
        
        facture.setTotalHT(Double.parseDouble(TotalHT.getText()));
        facture.setTotalTVA(Double.parseDouble(TotalTVA.getText()));
        facture.setTotalTTC(Double.parseDouble(TotalTTC.getText()));
        
        facture.setNumFacture(Integer.valueOf(NumFacture.getText()));
        DB.UpdateDB(facture);
         JOptionPane.showMessageDialog( null, "Succès!", 
					      "Facture Modifiée", JOptionPane.INFORMATION_MESSAGE);
            
        }
         
    }//GEN-LAST:event_EnregistrerActionPerformed

    int Move=-1;
    private void SuivantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuivantActionPerformed
        DB.SelectNumFactureDB();
        if(!DB.factures.isEmpty() && Move<DB.factures.size()-1) {
            Move++;
            NumFacture.setText(Integer.toString(DB.factures.get(Move).getNumFacture()));
            DateFacture.setText(DB.factures.get(Move).getDateFacture());
            TotalHT.setText(Double.toString(DB.factures.get(Move).getTotalHT()));
            TotalTTC.setText(Double.toString(DB.factures.get(Move).getTotalTTC()));
            TotalTVA.setText(Double.toString(DB.factures.get(Move).getTotalTVA()));
            Client.setSelectedItem(DB.factures.get(Move).getNumClient());
            switch (DB.factures.get(Move).getIDModeReglement()) {
                case 1: ModeReglement.setSelectedItem("Espèces");
                break;
                case 2: ModeReglement.setSelectedItem("Chèque");
                break;
                case 3: ModeReglement.setSelectedItem("Virement");
                break;
            }
            
            DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
            
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
            
            
        
        
            for(int i=0;i<DB.factures.get(Move).getCount();i++)
            model.addRow(new Object[]{
                DB.factures.get(Move).getReference()[i],
                DB.factures.get(Move).getLibProd()[i],
                DB.factures.get(Move).getQuantite()[i],
                DB.factures.get(Move).getPrixVente()[i],
                DB.factures.get(Move).getRemise()[i],
                DB.factures.get(Move).getTauxTVA()[i]});
            
         
        
        
            
        }
    }//GEN-LAST:event_SuivantActionPerformed

    private void PrecedantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrecedantActionPerformed
        DB.SelectNumFactureDB();
        if(!DB.factures.isEmpty() && Move>0) {
            Move--;
            NumFacture.setText(Integer.toString(DB.factures.get(Move).getNumFacture()));
            DateFacture.setText(DB.factures.get(Move).getDateFacture());
            TotalHT.setText(Double.toString(DB.factures.get(Move).getTotalHT()));
            TotalTTC.setText(Double.toString(DB.factures.get(Move).getTotalTTC()));
            TotalTVA.setText(Double.toString(DB.factures.get(Move).getTotalTVA()));
            Client.setSelectedItem(DB.factures.get(Move).getNumClient());
            switch (DB.factures.get(Move).getIDModeReglement()) {
                case 1: ModeReglement.setSelectedItem("Espèces");
                break;
                case 2: ModeReglement.setSelectedItem("Chèque");
                break;
                case 3: ModeReglement.setSelectedItem("Virement");
                break;
        }
            
            DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
            
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
            
            for(int i=0;i<DB.factures.get(Move).getCount();i++)
            model.addRow(new Object[]{
                DB.factures.get(Move).getReference()[i],
                DB.factures.get(Move).getLibProd()[i],
                DB.factures.get(Move).getQuantite()[i],
                DB.factures.get(Move).getPrixVente()[i],
                DB.factures.get(Move).getRemise()[i],
                DB.factures.get(Move).getTauxTVA()[i]});
            
        }
        if(Move==0) {
            Move=-1;
            NumFacture.setText("");
            DateFacture.setText("");
            TotalHT.setText("");
            TotalTTC.setText("");
            TotalTVA.setText("");
            Client.setSelectedItem("");
            ModeReglement.setSelectedItem("");
            
            DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
        }
    }//GEN-LAST:event_PrecedantActionPerformed

    private void DernierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DernierActionPerformed
        DB.SelectNumFactureDB();
        if(!DB.factures.isEmpty() && Move!=DB.factures.size()-1 ) {
            Move=DB.factures.size()-1;
            NumFacture.setText(Integer.toString(DB.factures.get(Move).getNumFacture()));
            DateFacture.setText(DB.factures.get(Move).getDateFacture());
            TotalHT.setText(Double.toString(DB.factures.get(Move).getTotalHT()));
            TotalTTC.setText(Double.toString(DB.factures.get(Move).getTotalTTC()));
            TotalTVA.setText(Double.toString(DB.factures.get(Move).getTotalTVA()));
            Client.setSelectedItem(DB.factures.get(Move).getNumClient());
            switch (DB.factures.get(Move).getIDModeReglement()) {
                case 1: ModeReglement.setSelectedItem("Espèces");
                break;
                case 2: ModeReglement.setSelectedItem("Chèque");
                break;
                case 3: ModeReglement.setSelectedItem("Virement");
                break;
            }
            DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
            
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
            
            for(int i=0;i<DB.factures.get(Move).getCount();i++)
            model.addRow(new Object[]{
                DB.factures.get(Move).getReference()[i],
                DB.factures.get(Move).getLibProd()[i],
                DB.factures.get(Move).getQuantite()[i],
                DB.factures.get(Move).getPrixVente()[i],
                DB.factures.get(Move).getRemise()[i],
                DB.factures.get(Move).getTauxTVA()[i]});
        }
    }//GEN-LAST:event_DernierActionPerformed

    private void PremierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PremierActionPerformed
        DB.SelectNumFactureDB();
        if(!DB.factures.isEmpty() && Move!=0) {
            Move=0;
            NumFacture.setText(Integer.toString(DB.factures.get(Move).getNumFacture()));
            DateFacture.setText(DB.factures.get(Move).getDateFacture());
            TotalHT.setText(Double.toString(DB.factures.get(Move).getTotalHT()));
            TotalTTC.setText(Double.toString(DB.factures.get(Move).getTotalTTC()));
            TotalTVA.setText(Double.toString(DB.factures.get(Move).getTotalTVA()));
            Client.setSelectedItem(DB.factures.get(Move).getNumClient());
            switch (DB.factures.get(Move).getIDModeReglement()) {
                case 1: ModeReglement.setSelectedItem("Espèces");
                break;
                case 2: ModeReglement.setSelectedItem("Chèque");
                break;
                case 3: ModeReglement.setSelectedItem("Virement");
                break;
            }
            DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
            
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
            
            for(int i=0;i<DB.factures.get(Move).getCount();i++)
            model.addRow(new Object[]{
                DB.factures.get(Move).getReference()[i],
                DB.factures.get(Move).getLibProd()[i],
                DB.factures.get(Move).getQuantite()[i],
                DB.factures.get(Move).getPrixVente()[i],
                DB.factures.get(Move).getRemise()[i],
                DB.factures.get(Move).getTauxTVA()[i]});
        }
    }//GEN-LAST:event_PremierActionPerformed

    private void ImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimerActionPerformed
        try {
            Boolean Done = NumFacture.print();
        } catch (PrinterException ex) {
            Logger.getLogger(FacturesClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ImprimerActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        NumFacture.setText("");
        DateFacture.setText("");
        TotalHT.setText("0.00");
        TotalTTC.setText("0.00");
        TotalTVA.setText("0.00");
        Client.setSelectedItem("");
        ModeReglement.setSelectedItem("");
            
        DefaultTableModel model = (DefaultTableModel) lignefac.getModel();
        int rows = model.getRowCount();
        for (int i = rows - 1; i >= 0; i--) model.removeRow(i);
        Move=-1;
    }//GEN-LAST:event_ResetActionPerformed

    private void ClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnregistrerUnClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnregistrerUnClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnregistrerUnClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnregistrerUnClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnregistrerUnClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Client;
    private javax.swing.JTextField DateFacture;
    private javax.swing.JLabel DateFacture1;
    private javax.swing.JButton Dernier;
    private javax.swing.JButton Enregistrer;
    private javax.swing.JButton Imprimer;
    private javax.swing.JComboBox<String> ModeReglement;
    private javax.swing.JLabel ModeReglement1;
    private javax.swing.JButton Nouvelle1;
    private javax.swing.JLabel NumClient1;
    private javax.swing.JTextField NumFacture;
    private javax.swing.JLabel NumFacture1;
    private javax.swing.JTextArea Observation;
    private javax.swing.JLabel Observation1;
    private javax.swing.JButton Precedant;
    private javax.swing.JButton Premier;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Retour;
    private javax.swing.JComboBox<String> SaisiLeJ1;
    private javax.swing.JButton Suivant;
    private javax.swing.JButton Supprimer;
    private javax.swing.JTextField TotalHT;
    private javax.swing.JLabel TotalHT1;
    private javax.swing.JTextField TotalTTC;
    private javax.swing.JLabel TotalTTC1;
    private javax.swing.JTextField TotalTVA;
    private javax.swing.JLabel TotalTVA1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable lignefac;
    // End of variables declaration//GEN-END:variables
}
